'use strict';
const extractLinks = require('./extractLinks');
const domNodesToCdt = require('./domNodesToCdt');
const extractFrames = require('./extractFrames');
const aggregateResourceUrlsAndBlobs = require('./aggregateResourceUrlsAndBlobs');
const makeGetResourceUrlsAndBlobs = require('./getResourceUrlsAndBlobs');
const makeProcessResource = require('./processResource');
const fetchUrl = require('./fetchUrl');
const makeFindStyleSheetByUrl = require('./findStyleSheetByUrl');
const makeExtractResourcesFromStyleSheet = require('./extractResourcesFromStyleSheet');
const extractResourceUrlsFromStyleAttrs = require('./extractResourceUrlsFromStyleAttrs');
const makeExtractResourceUrlsFromStyleTags = require('./extractResourceUrlsFromStyleTags');
const absolutizeUrl = require('./absolutizeUrl');
const uniq = require('./uniq');
const filterInlineUrl = require('./filterInlineUrl');
const isSameOrigin = require('./isSameOrigin');

function processPage(doc = document) {
  const styleSheetCache = {};
  const extractResourcesFromStyleSheet = makeExtractResourcesFromStyleSheet({styleSheetCache});
  const findStyleSheetByUrl = makeFindStyleSheetByUrl({styleSheetCache});
  const processResource = makeProcessResource({
    fetchUrl,
    findStyleSheetByUrl,
    extractResourcesFromStyleSheet,
    absolutizeUrl,
    isSameOrigin,
  });

  const getResourceUrlsAndBlobs = makeGetResourceUrlsAndBlobs({
    processResource,
    aggregateResourceUrlsAndBlobs,
  });

  const extractResourceUrlsFromStyleTags = makeExtractResourceUrlsFromStyleTags(
    extractResourcesFromStyleSheet,
  );

  return doProcessPage(doc);

  function doProcessPage(doc) {
    const frameElement = doc.defaultView && doc.defaultView.frameElement;
    const url = frameElement ? frameElement.src : doc.location.href;

    const cdt = domNodesToCdt(doc);

    const links = uniq(
      extractLinks(doc)
        .concat(extractResourceUrlsFromStyleAttrs(cdt))
        .concat(extractResourceUrlsFromStyleTags(doc)),
    )
      .map(absolutizeThisUrl)
      .filter(filterInlineUrlsIfExisting);

    const resourceUrlsAndBlobsPromise = getResourceUrlsAndBlobs(doc, url, links);

    const frameDocs = extractFrames(doc);
    const processFramesPromise = frameDocs.map(doProcessPage);

    return Promise.all([resourceUrlsAndBlobsPromise, ...processFramesPromise]).then(
      ([{resourceUrls, blobsObj}, ...framesResults]) => ({
        cdt,
        url,
        resourceUrls,
        blobs: blobsObjToArray(blobsObj),
        frames: framesResults,
        srcAttr: frameElement ? frameElement.getAttribute('src') : undefined,
      }),
    );

    function absolutizeThisUrl(someUrl) {
      try {
        return absolutizeUrl(someUrl, url);
      } catch (err) {
        // can't do anything with a non-absolute url
      }
    }
  }
}

function blobsObjToArray(blobsObj) {
  return Object.keys(blobsObj).map(blobUrl =>
    Object.assign(
      {
        url: blobUrl.replace(/^blob:/, ''),
      },
      blobsObj[blobUrl],
    ),
  );
}

function filterInlineUrlsIfExisting(absoluteUrl) {
  return absoluteUrl && filterInlineUrl(absoluteUrl);
}

module.exports = processPage;
