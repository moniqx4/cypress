'use strict';
const filterInlineUrl = require('./filterInlineUrl');
const absolutizeUrl = require('./absolutizeUrl');

function makeProcessResource({
  fetchUrl,
  findStyleSheetByUrl,
  extractResourcesFromStyleSheet,
  isSameOrigin,
  cache = {},
}) {
  return function processResource(absoluteUrl, doc, baseUrl, getResourceUrlsAndBlobs) {
    return cache[absoluteUrl] || (cache[absoluteUrl] = doProcessResource(absoluteUrl));

    function doProcessResource(url) {
      return fetchUrl(url)
        .catch(e => {
          if (probablyCORS(e, url)) {
            return {probablyCORS: true, url};
          } else {
            throw e;
          }
        })
        .then(({url, type, value, probablyCORS}) => {
          if (probablyCORS) {
            return {resourceUrls: [url]};
          }
          const result = {blobsObj: {[url]: {type, value}}};
          if (/text\/css/.test(type)) {
            const styleSheet = findStyleSheetByUrl(url, doc);
            if (!styleSheet) {
              return result;
            }
            const resourceUrls = extractResourcesFromStyleSheet(styleSheet, doc.defaultView)
              .map(resourceUrl => absolutizeUrl(resourceUrl, url.replace(/^blob:/, '')))
              .filter(filterInlineUrl);
            return getResourceUrlsAndBlobs(baseUrl, resourceUrls).then(
              ({resourceUrls, blobsObj}) => ({
                resourceUrls,
                blobsObj: Object.assign(blobsObj, {[url]: {type, value}}),
              }),
            );
          } else {
            return result;
          }
        })
        .catch(err => {
          console.log('[dom-snapshot] error while fetching', url, err);
          return {};
        });
    }

    function probablyCORS(err, url) {
      const msgCORS = err.message && err.message.includes('Failed to fetch');
      const nameCORS = err.name && err.name.includes('TypeError');
      return msgCORS && nameCORS && !isSameOrigin(url, baseUrl);
    }
  };
}

module.exports = makeProcessResource;
